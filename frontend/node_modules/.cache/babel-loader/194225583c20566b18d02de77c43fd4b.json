{"ast":null,"code":"import { FaceMesh, FACEMESH_LIPS } from \"@mediapipe/face_mesh\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { drawConnectors } from '@mediapipe/drawing_utils/drawing_utils';\nexport default function Lipstick(webcamRef, canvasRef) {\n  const faceMesh = new FaceMesh({\n    locateFile: file => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;\n    }\n  });\n  faceMesh.setOptions({\n    maxNumFaces: 5,\n    refineLandmarks: true,\n    minDetectionConfidence: 0.5,\n    minTrackingConfidence: 0.5\n  });\n  faceMesh.onResults(results => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n\n    if (results.multiFaceLandmarks) {\n      for (const landmarks of results.multiFaceLandmarks) {\n        drawConnectors(canvasCtx, landmarks, FACEMESH_LIPS, {\n          color: '#E53935'\n        });\n      }\n    }\n\n    canvasCtx.restore();\n  });\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await faceMesh.send({\n        image: webcamRef.current.video\n      });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n}\n_c = Lipstick;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lipstick\");","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/frontend/src/components/features/lipstick.js"],"names":["FaceMesh","FACEMESH_LIPS","Camera","drawConnectors","Lipstick","webcamRef","canvasRef","faceMesh","locateFile","file","setOptions","maxNumFaces","refineLandmarks","minDetectionConfidence","minTrackingConfidence","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","clearRect","drawImage","image","multiFaceLandmarks","landmarks","color","restore","camera","onFrame","send","start"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,aAAnB,QAAuC,sBAAvC;AACA,SAASC,MAAT,QAAuB,sCAAvB;AACA,SAAQC,cAAR,QAA8B,wCAA9B;AAEA,eAAe,SAASC,QAAT,CAAkBC,SAAlB,EAA+BC,SAA/B,EAA0C;AACvD,QAAMC,QAAQ,GAAG,IAAIP,QAAJ,CAAa;AAACQ,IAAAA,UAAU,EAAGC,IAAD,IAAU;AACnD,aAAQ,qDAAoDA,IAAK,EAAjE;AACD;AAF6B,GAAb,CAAjB;AAGAF,EAAAA,QAAQ,CAACG,UAAT,CAAoB;AAClBC,IAAAA,WAAW,EAAE,CADK;AAElBC,IAAAA,eAAe,EAAE,IAFC;AAGlBC,IAAAA,sBAAsB,EAAE,GAHN;AAIlBC,IAAAA,qBAAqB,EAAE;AAJL,GAApB;AAMAP,EAAAA,QAAQ,CAACQ,SAAT,CAAoBC,OAAD,IAAa;AAC9B,UAAMC,UAAU,GAAGZ,SAAS,CAACa,OAAV,CAAkBC,KAAlB,CAAwBF,UAA3C;AACA,UAAMG,WAAW,GAAGf,SAAS,CAACa,OAAV,CAAkBC,KAAlB,CAAwBC,WAA5C,CAF8B,CAI9B;;AACAd,IAAAA,SAAS,CAACY,OAAV,CAAkBG,KAAlB,GAA0BJ,UAA1B;AACAX,IAAAA,SAAS,CAACY,OAAV,CAAkBI,MAAlB,GAA2BF,WAA3B;AAEA,UAAMG,aAAa,GAAGjB,SAAS,CAACY,OAAhC;AACA,UAAMM,SAAS,GAAGD,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAAlB;AAEAD,IAAAA,SAAS,CAACE,IAAV;AACAF,IAAAA,SAAS,CAACG,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0BJ,aAAa,CAACF,KAAxC,EAA+CE,aAAa,CAACD,MAA7D;AACAE,IAAAA,SAAS,CAACI,SAAV,CACIZ,OAAO,CAACa,KADZ,EACmB,CADnB,EACsB,CADtB,EACyBN,aAAa,CAACF,KADvC,EAC8CE,aAAa,CAACD,MAD5D;;AAEA,QAAIN,OAAO,CAACc,kBAAZ,EAAgC;AAC9B,WAAK,MAAMC,SAAX,IAAwBf,OAAO,CAACc,kBAAhC,EAAoD;AAClD3B,QAAAA,cAAc,CAACqB,SAAD,EAAYO,SAAZ,EAAuB9B,aAAvB,EAAsC;AAAC+B,UAAAA,KAAK,EAAE;AAAR,SAAtC,CAAd;AACD;AACF;;AACDR,IAAAA,SAAS,CAACS,OAAV;AACD,GArBD;AAuBA,QAAMC,MAAM,GAAG,IAAIhC,MAAJ,CAAWG,SAAS,CAACa,OAAV,CAAkBC,KAA7B,EAAqC;AAClDgB,IAAAA,OAAO,EAAE,YAAY;AACnB,YAAM5B,QAAQ,CAAC6B,IAAT,CAAc;AAACP,QAAAA,KAAK,EAAExB,SAAS,CAACa,OAAV,CAAkBC;AAA1B,OAAd,CAAN;AACD,KAHiD;AAIlDE,IAAAA,KAAK,EAAE,IAJ2C;AAKlDC,IAAAA,MAAM,EAAE;AAL0C,GAArC,CAAf;AAOAY,EAAAA,MAAM,CAACG,KAAP;AACD;KAzCuBjC,Q","sourcesContent":["import { FaceMesh ,FACEMESH_LIPS} from \"@mediapipe/face_mesh\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport {drawConnectors}  from '@mediapipe/drawing_utils/drawing_utils';\n\nexport default function Lipstick(webcamRef ,  canvasRef) {\n  const faceMesh = new FaceMesh({locateFile: (file) => {\n    return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;\n  }});\n  faceMesh.setOptions({\n    maxNumFaces: 5,\n    refineLandmarks: true,\n    minDetectionConfidence: 0.5,\n    minTrackingConfidence: 0.5\n  });\n  faceMesh.onResults((results) => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(\n        results.image, 0, 0, canvasElement.width, canvasElement.height);\n    if (results.multiFaceLandmarks) {\n      for (const landmarks of results.multiFaceLandmarks) {\n        drawConnectors(canvasCtx, landmarks, FACEMESH_LIPS, {color: '#E53935'});\n      }\n    }\n    canvasCtx.restore();\n  });\n  \n  const camera = new Camera(webcamRef.current.video , {\n    onFrame: async () => {\n      await faceMesh.send({image: webcamRef.current.video });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n}\n\n"]},"metadata":{},"sourceType":"module"}