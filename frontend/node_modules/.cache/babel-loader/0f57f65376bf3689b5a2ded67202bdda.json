{"ast":null,"code":"import _asyncToGenerator from\"/home/deep/Imbesideyou/Imbesideyou_assignment/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _createForOfIteratorHelper from\"/home/deep/Imbesideyou/Imbesideyou_assignment/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _regeneratorRuntime from\"/home/deep/Imbesideyou/Imbesideyou_assignment/frontend/node_modules/@babel/runtime/regenerator/index.js\";import{Camera}from\"@mediapipe/camera_utils/camera_utils\";import{HAND_CONNECTIONS,Hands}from\"@mediapipe/hands/hands\";import{drawConnectors,drawLandmarks}from'@mediapipe/drawing_utils/drawing_utils';export default function HandPose(webcamRef,canvasRef){var hands=new Hands({locateFile:function locateFile(file){return\"https://cdn.jsdelivr.net/npm/@mediapipe/hands/\".concat(file);}});hands.setOptions({maxNumHands:2,modelComplexity:1,minDetectionConfidence:0.5,minTrackingConfidence:0.5});hands.onResults(function(results){var videoWidth=webcamRef.current.video.videoWidth;var videoHeight=webcamRef.current.video.videoHeight;// Set canvas width\ncanvasRef.current.width=videoWidth;canvasRef.current.height=videoHeight;var canvasElement=canvasRef.current;var canvasCtx=canvasElement.getContext(\"2d\");canvasCtx.save();canvasCtx.clearRect(0,0,canvasElement.width,canvasElement.height);canvasCtx.drawImage(results.image,0,0,canvasElement.width,canvasElement.height);if(results.multiHandLandmarks){var _iterator=_createForOfIteratorHelper(results.multiHandLandmarks),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var landmarks=_step.value;drawConnectors(canvasCtx,landmarks,HAND_CONNECTIONS,{color:'#FFF',lineWidth:5});drawLandmarks(canvasCtx,landmarks,{color:'#0009',lineWidth:2});}}catch(err){_iterator.e(err);}finally{_iterator.f();}}canvasCtx.restore();});var camera=new Camera(webcamRef.current.video,{onFrame:function(){var _onFrame=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return hands.send({image:webcamRef.current.video});case 2:case\"end\":return _context.stop();}}},_callee);}));function onFrame(){return _onFrame.apply(this,arguments);}return onFrame;}(),width:1280,height:720});camera.start();}","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/frontend/src/components/features/handShapeDetection.js"],"names":["Camera","HAND_CONNECTIONS","Hands","drawConnectors","drawLandmarks","HandPose","webcamRef","canvasRef","hands","locateFile","file","setOptions","maxNumHands","modelComplexity","minDetectionConfidence","minTrackingConfidence","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","clearRect","drawImage","image","multiHandLandmarks","landmarks","color","lineWidth","restore","camera","onFrame","send","start"],"mappings":"+bAAA,OAASA,MAAT,KAAuB,sCAAvB,CACA,OAAQC,gBAAR,CAA0BC,KAA1B,KAAuC,wBAAvC,CACA,OAAQC,cAAR,CAAyBC,aAAzB,KAA8C,wCAA9C,CAGA,cAAe,SAASC,CAAAA,QAAT,CAAkBC,SAAlB,CAA8BC,SAA9B,CAAyC,CACtD,GAAMC,CAAAA,KAAK,CAAG,GAAIN,CAAAA,KAAJ,CAAU,CAACO,UAAU,CAAE,oBAACC,IAAD,CAAU,CAC7C,8DAAwDA,IAAxD,EACD,CAFuB,CAAV,CAAd,CAGAF,KAAK,CAACG,UAAN,CAAiB,CACfC,WAAW,CAAE,CADE,CAEfC,eAAe,CAAE,CAFF,CAGfC,sBAAsB,CAAE,GAHT,CAIfC,qBAAqB,CAAE,GAJR,CAAjB,EAMAP,KAAK,CAACQ,SAAN,CAAgB,SAACC,OAAD,CAAa,CAC3B,GAAMC,CAAAA,UAAU,CAAGZ,SAAS,CAACa,OAAV,CAAkBC,KAAlB,CAAwBF,UAA3C,CACA,GAAMG,CAAAA,WAAW,CAAGf,SAAS,CAACa,OAAV,CAAkBC,KAAlB,CAAwBC,WAA5C,CAEA;AACAd,SAAS,CAACY,OAAV,CAAkBG,KAAlB,CAA0BJ,UAA1B,CACAX,SAAS,CAACY,OAAV,CAAkBI,MAAlB,CAA2BF,WAA3B,CAEA,GAAMG,CAAAA,aAAa,CAAGjB,SAAS,CAACY,OAAhC,CACA,GAAMM,CAAAA,SAAS,CAAGD,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAAlB,CACAD,SAAS,CAACE,IAAV,GACAF,SAAS,CAACG,SAAV,CAAoB,CAApB,CAAuB,CAAvB,CAA0BJ,aAAa,CAACF,KAAxC,CAA+CE,aAAa,CAACD,MAA7D,EACAE,SAAS,CAACI,SAAV,CACIZ,OAAO,CAACa,KADZ,CACmB,CADnB,CACsB,CADtB,CACyBN,aAAa,CAACF,KADvC,CAC8CE,aAAa,CAACD,MAD5D,EAEA,GAAIN,OAAO,CAACc,kBAAZ,CAAgC,0CACNd,OAAO,CAACc,kBADF,YAC9B,+CAAoD,IAAzCC,CAAAA,SAAyC,aAClD7B,cAAc,CAACsB,SAAD,CAAYO,SAAZ,CAAuB/B,gBAAvB,CACC,CAACgC,KAAK,CAAE,MAAR,CAAgBC,SAAS,CAAE,CAA3B,CADD,CAAd,CAEA9B,aAAa,CAACqB,SAAD,CAAYO,SAAZ,CAAuB,CAACC,KAAK,CAAE,OAAR,CAAiBC,SAAS,CAAE,CAA5B,CAAvB,CAAb,CACD,CAL6B,qDAM/B,CACDT,SAAS,CAACU,OAAV,GACD,CAtBD,EAwBA,GAAMC,CAAAA,MAAM,CAAG,GAAIpC,CAAAA,MAAJ,CAAWM,SAAS,CAACa,OAAV,CAAkBC,KAA7B,CAAqC,CAClDiB,OAAO,iFAAE,yJACD7B,CAAAA,KAAK,CAAC8B,IAAN,CAAW,CAACR,KAAK,CAAExB,SAAS,CAACa,OAAV,CAAkBC,KAA1B,CAAX,CADC,uDAAF,+EAD2C,CAIlDE,KAAK,CAAE,IAJ2C,CAKlDC,MAAM,CAAE,GAL0C,CAArC,CAAf,CAOAa,MAAM,CAACG,KAAP,GAED","sourcesContent":["import { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport {HAND_CONNECTIONS ,Hands } from \"@mediapipe/hands/hands\";\nimport {drawConnectors , drawLandmarks}  from '@mediapipe/drawing_utils/drawing_utils';\n\n\nexport default function HandPose(webcamRef , canvasRef) {\n  const hands = new Hands({locateFile: (file) => {\n    return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;\n  }});\n  hands.setOptions({\n    maxNumHands: 2,\n    modelComplexity: 1,\n    minDetectionConfidence: 0.5,\n    minTrackingConfidence: 0.5\n  });\n  hands.onResults((results) => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(\n        results.image, 0, 0, canvasElement.width, canvasElement.height);\n    if (results.multiHandLandmarks) {\n      for (const landmarks of results.multiHandLandmarks) {\n        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS,\n                       {color: '#FFF', lineWidth: 5});\n        drawLandmarks(canvasCtx, landmarks, {color: '#0009', lineWidth: 2});\n      }\n    }\n    canvasCtx.restore();\n  });\n  \n  const camera = new Camera(webcamRef.current.video , {\n    onFrame: async () => {\n      await hands.send({image: webcamRef.current.video });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n   \n}\n\n"]},"metadata":{},"sourceType":"module"}