{"ast":null,"code":"var _jsxFileName = \"/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/bodyPoseDetection.js\",\n    _s = $RefreshSig$();\n\nimport * as Holistic from \"@mediapipe/holistic\";\nimport React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { drawConnectors, drawLandmarks } from \"@mediapipe/drawing_utils/drawing_utils\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BodyPoseDetection() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function onResults(results) {\n    // const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(results.segmentationMask, 0, 0, canvasElement.width, canvasElement.height); // Only overwrite existing pixels.\n\n    canvasCtx.globalCompositeOperation = 'source-in';\n    canvasCtx.fillStyle = '#00FF00';\n    canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height); // Only overwrite missing pixels.\n\n    canvasCtx.globalCompositeOperation = 'destination-atop';\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.globalCompositeOperation = 'source-over';\n    drawConnectors(canvasCtx, results.poseLandmarks, POSE_CONNECTIONS, {\n      color: '#00FF00',\n      lineWidth: 4\n    });\n    drawLandmarks(canvasCtx, results.poseLandmarks, {\n      color: '#FF0000',\n      lineWidth: 2\n    });\n    drawConnectors(canvasCtx, results.faceLandmarks, FACEMESH_TESSELATION, {\n      color: '#C0C0C070',\n      lineWidth: 1\n    });\n    drawConnectors(canvasCtx, results.leftHandLandmarks, HAND_CONNECTIONS, {\n      color: '#CC0000',\n      lineWidth: 5\n    });\n    drawLandmarks(canvasCtx, results.leftHandLandmarks, {\n      color: '#00FF00',\n      lineWidth: 2\n    });\n    drawConnectors(canvasCtx, results.rightHandLandmarks, HAND_CONNECTIONS, {\n      color: '#00CC00',\n      lineWidth: 5\n    });\n    drawLandmarks(canvasCtx, results.rightHandLandmarks, {\n      color: '#FF0000',\n      lineWidth: 2\n    });\n    canvasCtx.restore();\n  } // }\n  // setInterval(())\n\n\n  useEffect(() => {\n    const holistic = new Holistic({\n      locateFile: file => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic/${file}`;\n      }\n    });\n    holistic.setOptions({\n      modelComplexity: 1,\n      smoothLandmarks: true,\n      enableSegmentation: true,\n      smoothSegmentation: true,\n      refineFaceLandmarks: true,\n      minDetectionConfidence: 0.5,\n      minTrackingConfidence: 0.5\n    });\n    holistic.onResults(onResults);\n    const camera = new Camera(webcamRef.current.video, {\n      onFrame: async () => {\n        await holistic.send({\n          image: webcamRef.current.video\n        });\n      },\n      width: 1280,\n      height: 720\n    });\n    camera.start();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"center\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"output_canvas\",\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BodyPoseDetection, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = BodyPoseDetection;\n\nvar _c;\n\n$RefreshReg$(_c, \"BodyPoseDetection\");","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/bodyPoseDetection.js"],"names":["Holistic","React","useRef","useEffect","Camera","drawConnectors","drawLandmarks","Webcam","BodyPoseDetection","webcamRef","canvasRef","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","clearRect","drawImage","segmentationMask","globalCompositeOperation","fillStyle","fillRect","image","poseLandmarks","POSE_CONNECTIONS","color","lineWidth","faceLandmarks","FACEMESH_TESSELATION","leftHandLandmarks","HAND_CONNECTIONS","rightHandLandmarks","restore","holistic","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","refineFaceLandmarks","minDetectionConfidence","minTrackingConfidence","camera","onFrame","send","start","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import * as Holistic from \"@mediapipe/holistic\";\nimport React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport {\n  drawConnectors,\n  drawLandmarks,\n} from \"@mediapipe/drawing_utils/drawing_utils\";\nimport Webcam from \"react-webcam\";\n\nexport default function BodyPoseDetection() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n\n  function onResults(results) {\n    // const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n\n\n    canvasCtx.save();\n  canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n  canvasCtx.drawImage(results.segmentationMask, 0, 0,\n                      canvasElement.width, canvasElement.height);\n\n  // Only overwrite existing pixels.\n  canvasCtx.globalCompositeOperation = 'source-in';\n  canvasCtx.fillStyle = '#00FF00';\n  canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n\n  // Only overwrite missing pixels.\n  canvasCtx.globalCompositeOperation = 'destination-atop';\n  canvasCtx.drawImage(\n      results.image, 0, 0, canvasElement.width, canvasElement.height);\n\n  canvasCtx.globalCompositeOperation = 'source-over';\n  drawConnectors(canvasCtx, results.poseLandmarks, POSE_CONNECTIONS,\n                 {color: '#00FF00', lineWidth: 4});\n  drawLandmarks(canvasCtx, results.poseLandmarks,\n                {color: '#FF0000', lineWidth: 2});\n  drawConnectors(canvasCtx, results.faceLandmarks, FACEMESH_TESSELATION,\n                 {color: '#C0C0C070', lineWidth: 1});\n  drawConnectors(canvasCtx, results.leftHandLandmarks, HAND_CONNECTIONS,\n                 {color: '#CC0000', lineWidth: 5});\n  drawLandmarks(canvasCtx, results.leftHandLandmarks,\n                {color: '#00FF00', lineWidth: 2});\n  drawConnectors(canvasCtx, results.rightHandLandmarks, HAND_CONNECTIONS,\n                 {color: '#00CC00', lineWidth: 5});\n  drawLandmarks(canvasCtx, results.rightHandLandmarks,\n                {color: '#FF0000', lineWidth: 2});\n  canvasCtx.restore();\n  }\n  // }\n\n  // setInterval(())\n  useEffect(() => {\n    const holistic = new Holistic({locateFile: (file) => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic/${file}`;\n      }});\n      holistic.setOptions({\n        modelComplexity: 1,\n        smoothLandmarks: true,\n        enableSegmentation: true,\n        smoothSegmentation: true,\n        refineFaceLandmarks: true,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      });\n      holistic.onResults(onResults);\n      \n      const camera = new Camera( webcamRef.current.video , {\n        onFrame: async () => {\n          await holistic.send({image:  webcamRef.current.video });\n        },\n        width: 1280,\n        height: 720\n      });\n      camera.start();\n  }, []);\n  return (\n    <center>\n      <div className=\"App\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />{\" \"}\n        <canvas\n          ref={canvasRef}\n          className=\"output_canvas\"\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        ></canvas>\n      </div>\n    </center>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}