{"ast":null,"code":"import { FaceDetection } from \"@mediapipe/face_detection/face_detection\";\nimport React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { drawingUtils } from '@mediapipe/drawing_utils/drawing_utils';\nimport Webcam from \"react-webcam\";\nexport default function ddd(webcamRef, canvasRef) {\n  const faceDetection = new FaceDetection({\n    locateFile: file => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/face_detection@0.0/${file}`;\n    }\n  });\n  faceDetection.setOptions({\n    modelSelection: 0,\n    minDetectionConfidence: 0.5\n  });\n  faceDetection.onResults(results => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n\n    if (results.detections.length > 0) {\n      drawingUtils.drawRectangle(canvasCtx, results.detections[0].boundingBox, {\n        color: 'blue',\n        lineWidth: 4,\n        fillColor: '#00000000'\n      });\n      drawingUtils.drawLandmarks(canvasCtx, results.detections[0].landmarks, {\n        color: 'red',\n        radius: 5\n      });\n    }\n\n    canvasCtx.restore();\n  });\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await faceDetection.send({\n        image: webcamRef.current.video\n      });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n} // export default function FaceShapeDetection() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   function onResults(results) {\n//     // const video = webcamRef.current.video;\n//     const videoWidth = webcamRef.current.video.videoWidth;\n//     const videoHeight = webcamRef.current.video.videoHeight;\n//     // Set canvas width\n//     canvasRef.current.width = videoWidth;\n//     canvasRef.current.height = videoHeight;\n//     const canvasElement = canvasRef.current;\n//     const canvasCtx = canvasElement.getContext(\"2d\");\n//     canvasCtx.save();\n//   canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n//   canvasCtx.drawImage(\n//       results.image, 0, 0, canvasElement.width, canvasElement.height);\n//   if (results.detections.length > 0) {\n//     drawingUtils.drawRectangle(\n//         canvasCtx, results.detections[0].boundingBox,\n//         {color: 'blue', lineWidth: 4, fillColor: '#00000000'});\n//     drawingUtils.drawLandmarks(canvasCtx, results.detections[0].landmarks, {\n//       color: 'red',\n//       radius: 5,\n//     });\n//   }\n//   canvasCtx.restore();\n//   }\n//   // }\n//   // setInterval(())\n//   useEffect(() => {\n//     const faceDetection = new FaceDetection({locateFile: (file) => {\n//         return `https://cdn.jsdelivr.net/npm/@mediapipe/face_detection@0.0/${file}`;\n//       }});\n//       faceDetection.setOptions({\n//         modelSelection: 0,\n//         minDetectionConfidence: 0.5\n//       });\n//       faceDetection.onResults(onResults);\n//       const camera = new Camera(webcamRef.current.video, {\n//         onFrame: async () => {\n//           await faceDetection.send({image: webcamRef.current.video});\n//         },\n//         width: 1280,\n//         height: 720\n//       });\n//       camera.start();\n//   }, []);\n//   return (\n//     <center>\n//       <div className=\"App\">\n//         <Webcam\n//           ref={webcamRef}\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         />{\" \"}\n//         <canvas\n//           ref={canvasRef}\n//           className=\"output_canvas\"\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         ></canvas>\n//       </div>\n//     </center>\n//   );\n// }","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/faceDetection.js"],"names":["FaceDetection","React","useRef","useEffect","Camera","drawingUtils","Webcam","ddd","webcamRef","canvasRef","faceDetection","locateFile","file","setOptions","modelSelection","minDetectionConfidence","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","clearRect","drawImage","image","detections","length","drawRectangle","boundingBox","color","lineWidth","fillColor","drawLandmarks","landmarks","radius","restore","camera","onFrame","send","start"],"mappings":"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","sourcesContent":["import { FaceDetection} from \"@mediapipe/face_detection/face_detection\";\nimport React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport {drawingUtils}  from '@mediapipe/drawing_utils/drawing_utils';\nimport Webcam from \"react-webcam\";\n\nexport default function ddd(webcamRef ,canvasRef){\n  const faceDetection = new FaceDetection({locateFile: (file) => {\n    return `https://cdn.jsdelivr.net/npm/@mediapipe/face_detection@0.0/${file}`;\n  }});\n  faceDetection.setOptions({\n    modelSelection: 0,\n    minDetectionConfidence: 0.5\n  });\n  faceDetection.onResults((results) => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(\n        results.image, 0, 0, canvasElement.width, canvasElement.height);\n    if (results.detections.length > 0) {\n      drawingUtils.drawRectangle(\n          canvasCtx, results.detections[0].boundingBox,\n          {color: 'blue', lineWidth: 4, fillColor: '#00000000'});\n      drawingUtils.drawLandmarks(canvasCtx, results.detections[0].landmarks, {\n        color: 'red',\n        radius: 5,\n      });\n    }\n    canvasCtx.restore();\n  });\n  \n  const camera = new Camera(webcamRef.current.video , {\n    onFrame: async () => {\n      await faceDetection.send({image: webcamRef.current.video });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n}\n\n// export default function FaceShapeDetection() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n\n//   function onResults(results) {\n//     // const video = webcamRef.current.video;\n//     const videoWidth = webcamRef.current.video.videoWidth;\n//     const videoHeight = webcamRef.current.video.videoHeight;\n\n//     // Set canvas width\n//     canvasRef.current.width = videoWidth;\n//     canvasRef.current.height = videoHeight;\n\n//     const canvasElement = canvasRef.current;\n//     const canvasCtx = canvasElement.getContext(\"2d\");\n//     canvasCtx.save();\n//   canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n//   canvasCtx.drawImage(\n//       results.image, 0, 0, canvasElement.width, canvasElement.height);\n//   if (results.detections.length > 0) {\n//     drawingUtils.drawRectangle(\n//         canvasCtx, results.detections[0].boundingBox,\n//         {color: 'blue', lineWidth: 4, fillColor: '#00000000'});\n//     drawingUtils.drawLandmarks(canvasCtx, results.detections[0].landmarks, {\n//       color: 'red',\n//       radius: 5,\n//     });\n//   }\n//   canvasCtx.restore();\n//   }\n//   // }\n\n//   // setInterval(())\n//   useEffect(() => {\n//     const faceDetection = new FaceDetection({locateFile: (file) => {\n//         return `https://cdn.jsdelivr.net/npm/@mediapipe/face_detection@0.0/${file}`;\n//       }});\n//       faceDetection.setOptions({\n//         modelSelection: 0,\n//         minDetectionConfidence: 0.5\n//       });\n//       faceDetection.onResults(onResults);\n      \n//       const camera = new Camera(webcamRef.current.video, {\n//         onFrame: async () => {\n//           await faceDetection.send({image: webcamRef.current.video});\n//         },\n//         width: 1280,\n//         height: 720\n//       });\n//       camera.start();\n      \n//   }, []);\n//   return (\n//     <center>\n//       <div className=\"App\">\n//         <Webcam\n//           ref={webcamRef}\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         />{\" \"}\n//         <canvas\n//           ref={canvasRef}\n//           className=\"output_canvas\"\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         ></canvas>\n//       </div>\n//     </center>\n//   );\n// }\n\n"]},"metadata":{},"sourceType":"module"}