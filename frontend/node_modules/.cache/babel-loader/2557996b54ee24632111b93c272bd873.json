{"ast":null,"code":"import React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { SelfieSegmentation } from \"@mediapipe/selfie_segmentation/selfie_segmentation\";\nimport Webcam from \"react-webcam\";\nexport default function yyy(webcamRef, canvasRef) {\n  const selfieSegmentation = new SelfieSegmentation({\n    locateFile: file => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n    }\n  });\n  selfieSegmentation.setOptions({\n    modelSelection: 1\n  });\n  selfieSegmentation.onResults(results => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save(); // canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n    canvasCtx.drawImage(results.segmentationMask, 0, 0, canvasElement.width, canvasElement.height); // Only overwrite existing pixels.\n\n    canvasCtx.globalCompositeOperation = \"source-in\";\n    canvasCtx.fillStyle = \"yellow\"; // canvasCtx.drawImage(\n    //     results.image,\n    //     0,\n    //     0,\n    //     canvasElement.width,\n    //     canvasElement.height\n    //   );\n    // Only overwrite missing pixels.\n\n    canvasCtx.globalCompositeOperation = \"destination-atop\";\n    canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.restore();\n  });\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await selfieSegmentation.send({\n        image: webcamRef.current.video\n      });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n} // export default function SelfieSegmentationDetection() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   function onResults(results) {\n//     // const video = webcamRef.current.video;\n//     const videoWidth = webcamRef.current.video.videoWidth;\n//     const videoHeight = webcamRef.current.video.videoHeight;\n//     // Set canvas width\n//     canvasRef.current.width = videoWidth;\n//     canvasRef.current.height = videoHeight;\n//     const canvasElement = canvasRef.current;\n//     const canvasCtx = canvasElement.getContext(\"2d\");\n//     canvasCtx.save();\n//     canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n//     canvasCtx.drawImage(\n//       results.segmentationMask,\n//       0,\n//       0,\n//       canvasElement.width,\n//       canvasElement.height\n//     );\n//     // Only overwrite existing pixels.\n//     canvasCtx.globalCompositeOperation = \"source-in\";\n//     canvasCtx.fillStyle = \"#00FF00\";\n//     canvasCtx.drawImage(\n//         results.image,\n//         0,\n//         0,\n//         canvasElement.width,\n//         canvasElement.height\n//       );\n//     // Only overwrite missing pixels.\n//     canvasCtx.globalCompositeOperation = \"destination-atop\";\n//     canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n//     canvasCtx.restore();\n//   }\n//   // }\n//   // setInterval(())\n//   useEffect(() => {\n//     const selfieSegmentation = new SelfieSegmentation({\n//       locateFile: (file) => {\n//         return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n//       },\n//     });\n//     selfieSegmentation.setOptions({\n//       modelSelection: 1,\n//     });\n//     selfieSegmentation.onResults(onResults);\n//     const camera = new Camera(webcamRef.current.video, {\n//       onFrame: async () => {\n//         await selfieSegmentation.send({ image: webcamRef.current.video });\n//       },\n//       width: 1280,\n//       height: 720,\n//     });\n//     camera.start();\n//   }, []);\n//   return (\n//     <center>\n//       <div className=\"App\">\n//         <Webcam\n//           ref={webcamRef}\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         />{\" \"}\n//         <canvas\n//           ref={canvasRef}\n//           className=\"output_canvas\"\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         ></canvas>\n//       </div>\n//     </center>\n//   );\n// }","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/selfieSegmentation.js"],"names":["React","useRef","useEffect","Camera","SelfieSegmentation","Webcam","yyy","webcamRef","canvasRef","selfieSegmentation","locateFile","file","setOptions","modelSelection","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","drawImage","segmentationMask","globalCompositeOperation","fillStyle","fillRect","restore","camera","onFrame","send","image","start"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,sCAAvB;AACA,SAASC,kBAAT,QAAmC,oDAAnC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,eAAe,SAASC,GAAT,CAAaC,SAAb,EAAyBC,SAAzB,EAAmC;AAChD,QAAMC,kBAAkB,GAAG,IAAIL,kBAAJ,CAAuB;AAChDM,IAAAA,UAAU,EAAGC,IAAD,IAAU;AACpB,aAAQ,+DAA8DA,IAAK,EAA3E;AACD;AAH+C,GAAvB,CAA3B;AAKAF,EAAAA,kBAAkB,CAACG,UAAnB,CAA8B;AAC5BC,IAAAA,cAAc,EAAE;AADY,GAA9B;AAGAJ,EAAAA,kBAAkB,CAACK,SAAnB,CAA8BC,OAAD,IAAa;AACxC,UAAMC,UAAU,GAAGT,SAAS,CAACU,OAAV,CAAkBC,KAAlB,CAAwBF,UAA3C;AACA,UAAMG,WAAW,GAAGZ,SAAS,CAACU,OAAV,CAAkBC,KAAlB,CAAwBC,WAA5C,CAFwC,CAIxC;;AACAX,IAAAA,SAAS,CAACS,OAAV,CAAkBG,KAAlB,GAA0BJ,UAA1B;AACAR,IAAAA,SAAS,CAACS,OAAV,CAAkBI,MAAlB,GAA2BF,WAA3B;AAEA,UAAMG,aAAa,GAAGd,SAAS,CAACS,OAAhC;AACA,UAAMM,SAAS,GAAGD,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAAlB;AACAD,IAAAA,SAAS,CAACE,IAAV,GAVwC,CAWxC;;AACAF,IAAAA,SAAS,CAACG,SAAV,CACEX,OAAO,CAACY,gBADV,EAEE,CAFF,EAGE,CAHF,EAIEL,aAAa,CAACF,KAJhB,EAKEE,aAAa,CAACD,MALhB,EAZwC,CAoBxC;;AACAE,IAAAA,SAAS,CAACK,wBAAV,GAAqC,WAArC;AACAL,IAAAA,SAAS,CAACM,SAAV,GAAsB,QAAtB,CAtBwC,CAuBxC;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AACAN,IAAAA,SAAS,CAACK,wBAAV,GAAqC,kBAArC;AACAL,IAAAA,SAAS,CAACO,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBR,aAAa,CAACF,KAAvC,EAA8CE,aAAa,CAACD,MAA5D;AACAE,IAAAA,SAAS,CAACQ,OAAV;AACD,GApCD;AAsCA,QAAMC,MAAM,GAAG,IAAI7B,MAAJ,CAAWI,SAAS,CAACU,OAAV,CAAkBC,KAA7B,EAAoC;AACjDe,IAAAA,OAAO,EAAE,YAAY;AACnB,YAAMxB,kBAAkB,CAACyB,IAAnB,CAAwB;AAAEC,QAAAA,KAAK,EAAE5B,SAAS,CAACU,OAAV,CAAkBC;AAA3B,OAAxB,CAAN;AACD,KAHgD;AAIjDE,IAAAA,KAAK,EAAE,IAJ0C;AAKjDC,IAAAA,MAAM,EAAE;AALyC,GAApC,CAAf;AAOAW,EAAAA,MAAM,CAACI,KAAP;AACD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { SelfieSegmentation } from \"@mediapipe/selfie_segmentation/selfie_segmentation\";\nimport Webcam from \"react-webcam\";\n\nexport default function yyy(webcamRef , canvasRef){\n  const selfieSegmentation = new SelfieSegmentation({\n    locateFile: (file) => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n    },\n  });\n  selfieSegmentation.setOptions({\n    modelSelection: 1,\n  });\n  selfieSegmentation.onResults((results) => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    // canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(\n      results.segmentationMask,\n      0,\n      0,\n      canvasElement.width,\n      canvasElement.height\n    );\n\n    // Only overwrite existing pixels.\n    canvasCtx.globalCompositeOperation = \"source-in\";\n    canvasCtx.fillStyle = \"yellow\";\n    // canvasCtx.drawImage(\n    //     results.image,\n    //     0,\n    //     0,\n    //     canvasElement.width,\n    //     canvasElement.height\n    //   );\n\n\n    // Only overwrite missing pixels.\n    canvasCtx.globalCompositeOperation = \"destination-atop\";\n    canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.restore();\n  });\n\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await selfieSegmentation.send({ image: webcamRef.current.video });\n    },\n    width: 1280,\n    height: 720,\n  });\n  camera.start();\n}\n\n// export default function SelfieSegmentationDetection() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n\n//   function onResults(results) {\n//     // const video = webcamRef.current.video;\n//     const videoWidth = webcamRef.current.video.videoWidth;\n//     const videoHeight = webcamRef.current.video.videoHeight;\n\n//     // Set canvas width\n//     canvasRef.current.width = videoWidth;\n//     canvasRef.current.height = videoHeight;\n\n//     const canvasElement = canvasRef.current;\n//     const canvasCtx = canvasElement.getContext(\"2d\");\n//     canvasCtx.save();\n//     canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n//     canvasCtx.drawImage(\n//       results.segmentationMask,\n//       0,\n//       0,\n//       canvasElement.width,\n//       canvasElement.height\n//     );\n\n//     // Only overwrite existing pixels.\n//     canvasCtx.globalCompositeOperation = \"source-in\";\n//     canvasCtx.fillStyle = \"#00FF00\";\n//     canvasCtx.drawImage(\n//         results.image,\n//         0,\n//         0,\n//         canvasElement.width,\n//         canvasElement.height\n//       );\n\n\n//     // Only overwrite missing pixels.\n//     canvasCtx.globalCompositeOperation = \"destination-atop\";\n//     canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n//     canvasCtx.restore();\n//   }\n//   // }\n\n//   // setInterval(())\n//   useEffect(() => {\n//     const selfieSegmentation = new SelfieSegmentation({\n//       locateFile: (file) => {\n//         return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n//       },\n//     });\n//     selfieSegmentation.setOptions({\n//       modelSelection: 1,\n//     });\n//     selfieSegmentation.onResults(onResults);\n\n//     const camera = new Camera(webcamRef.current.video, {\n//       onFrame: async () => {\n//         await selfieSegmentation.send({ image: webcamRef.current.video });\n//       },\n//       width: 1280,\n//       height: 720,\n//     });\n//     camera.start();\n//   }, []);\n\n//   return (\n//     <center>\n//       <div className=\"App\">\n//         <Webcam\n//           ref={webcamRef}\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         />{\" \"}\n//         <canvas\n//           ref={canvasRef}\n//           className=\"output_canvas\"\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         ></canvas>\n//       </div>\n//     </center>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}