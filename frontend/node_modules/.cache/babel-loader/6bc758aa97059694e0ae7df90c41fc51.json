{"ast":null,"code":"var _jsxFileName = \"/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/handShapeDetection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { HAND_CONNECTIONS, Hands } from \"@mediapipe/hands/hands\";\nimport { drawConnectors, drawLandmarks } from '@mediapipe/drawing_utils/drawing_utils';\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HandShapeDetection() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function onResults(results) {\n    // const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n\n    if (results.multiHandLandmarks) {\n      for (const landmarks of results.multiHandLandmarks) {\n        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS, {\n          color: '#00FF00',\n          lineWidth: 5\n        });\n        drawLandmarks(canvasCtx, landmarks, {\n          color: '#FF0000',\n          lineWidth: 2\n        });\n      }\n    }\n\n    canvasCtx.restore();\n  } // }\n  // setInterval(())\n\n\n  useEffect(() => {\n    const hands = new Hands({\n      locateFile: file => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;\n      }\n    });\n    hands.setOptions({\n      maxNumHands: 2,\n      modelComplexity: 1,\n      minDetectionConfidence: 0.5,\n      minTrackingConfidence: 0.5\n    });\n    hands.onResults(onResults);\n    const camera = new Camera(webcamRef.current.video, {\n      onFrame: async () => {\n        await hands.send({\n          image: webcamRef.current.video\n        });\n      },\n      width: 1280,\n      height: 720\n    });\n    camera.start();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"center\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 600,\n          height: 500\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"output_canvas\",\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 600,\n          height: 500\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HandShapeDetection, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = HandShapeDetection;\n\nvar _c;\n\n$RefreshReg$(_c, \"HandShapeDetection\");","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/handShapeDetection.js"],"names":["React","useRef","useEffect","Camera","HAND_CONNECTIONS","Hands","drawConnectors","drawLandmarks","Webcam","HandShapeDetection","webcamRef","canvasRef","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","clearRect","drawImage","image","multiHandLandmarks","landmarks","color","lineWidth","restore","hands","locateFile","file","setOptions","maxNumHands","modelComplexity","minDetectionConfidence","minTrackingConfidence","camera","onFrame","send","start","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport {HAND_CONNECTIONS ,Hands } from \"@mediapipe/hands/hands\";\nimport {drawConnectors , drawLandmarks}  from '@mediapipe/drawing_utils/drawing_utils';\nimport Webcam from \"react-webcam\";\n\nexport default function HandShapeDetection() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function onResults(results) {\n    // const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(\n        results.image, 0, 0, canvasElement.width, canvasElement.height);\n    if (results.multiHandLandmarks) {\n      for (const landmarks of results.multiHandLandmarks) {\n        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS,\n                       {color: '#00FF00', lineWidth: 5});\n        drawLandmarks(canvasCtx, landmarks, {color: '#FF0000', lineWidth: 2});\n      }\n    }\n    canvasCtx.restore();\n  }\n  // }\n\n  // setInterval(())\n  useEffect(() => {\n    const hands = new Hands({locateFile: (file) => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;\n      }});\n      hands.setOptions({\n        maxNumHands: 2,\n        modelComplexity: 1,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      });\n      hands.onResults(onResults);\n      \n      const camera = new Camera(webcamRef.current.video , {\n        onFrame: async () => {\n          await hands.send({image: webcamRef.current.video });\n        },\n        width: 1280,\n        height: 720\n      });\n      camera.start();\n      \n  }, []);\n\n  return (\n    <center>\n      <div className=\"App\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 600,\n            height: 500,\n          }}\n        />{\" \"}\n        <canvas\n          ref={canvasRef}\n          className=\"output_canvas\"\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 600,\n            height: 500,\n          }}\n        ></canvas>\n      </div>\n    </center>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}