{"ast":null,"code":"var _jsxFileName = \"/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/faceLandmarkDetection.js\",\n    _s = $RefreshSig$();\n\nimport { FaceMesh } from \"@mediapipe/face_mesh\";\nimport React, { useRef, useEffect } from \"react\";\nimport * as Facemesh from \"@mediapipe/face_mesh\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { drawConnectors } from '@mediapipe/drawing_utils/drawing_utils';\nimport Webcam from \"react-webcam\";\nimport solve from \"./bodyPoseDetection\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FaceLandmarkDetection() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null); // function onResults(results) {\n  //   // const video = webcamRef.current.video;\n  //   const videoWidth = webcamRef.current.video.videoWidth;\n  //   const videoHeight = webcamRef.current.video.videoHeight;\n  //   // Set canvas width\n  //   canvasRef.current.width = videoWidth;\n  //   canvasRef.current.height = videoHeight;\n  //   const canvasElement = canvasRef.current;\n  //   const canvasCtx = canvasElement.getContext(\"2d\");\n  //   canvasCtx.save();\n  //   canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n  //   canvasCtx.drawImage(\n  //     results.image,\n  //     0,\n  //     0,\n  //     canvasElement.width,\n  //     canvasElement.height\n  //   );\n  //   if (results.multiFaceLandmarks) {\n  //     for (const landmarks of results.multiFaceLandmarks) {\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n  //         color: \"#C0C0C070\",\n  //         lineWidth: 1,\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n  //         color: \"#FF3030\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n  //         color: \"#FF3030\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n  //         color: \"#30FF30\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n  //         color: \"#30FF30\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n  //         color: \"#E0E0E0\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n  //         color: \"#E0E0E0\",\n  //       });\n  //     }\n  //   }\n  //   canvasCtx.restore();\n  // }\n  // }\n  // setInterval(())\n\n  useEffect(() => {\n    // const faceMesh = new FaceMesh({\n    //   locateFile: (file) => {\n    //     return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;\n    //   },\n    // });\n    // faceMesh.setOptions({\n    //   maxNumFaces: 4,\n    //   refineLandmarks: true,\n    //   minDetectionConfidence: 0.5,\n    //   minTrackingConfidence: 0.5,\n    // });\n    // faceMesh.onResults((results) => {\n    //   const videoWidth = webcamRef.current.video.videoWidth;\n    // const videoHeight = webcamRef.current.video.videoHeight;\n    // // Set canvas width\n    // canvasRef.current.width = videoWidth;\n    // canvasRef.current.height = videoHeight;\n    // const canvasElement = canvasRef.current;\n    // const canvasCtx = canvasElement.getContext(\"2d\");\n    // canvasCtx.save();\n    // canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    // canvasCtx.drawImage(\n    //   results.image,\n    //   0,\n    //   0,\n    //   canvasElement.width,\n    //   canvasElement.height\n    // );\n    // if (results.multiFaceLandmarks) {\n    //   for (const landmarks of results.multiFaceLandmarks) {\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n    //       color: \"#C0C0C070\",\n    //       lineWidth: 1,\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n    //       color: \"#FF3030\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n    //       color: \"#FF3030\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n    //       color: \"#30FF30\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n    //       color: \"#30FF30\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n    //       color: \"#E0E0E0\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n    //       color: \"#E0E0E0\",\n    //     });\n    //   }\n    // }\n    // canvasCtx.restore();\n    // });\n    // if (\n    //   typeof webcamRef.current !== \"undefined\" &&\n    //   webcamRef.current !== null\n    // ) {\n    //   const camera = new Camera(webcamRef.current.video, {\n    //     onFrame: async () => {\n    //       await faceMesh.send({ image: webcamRef.current.video });\n    //     },\n    //     width: 1280,\n    //     height: 720,\n    //   });\n    //   camera.start();\n    // }\n    solve(webcamRef, canvasRef);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"center\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"output_canvas\",\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FaceLandmarkDetection, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = FaceLandmarkDetection;\n\nvar _c;\n\n$RefreshReg$(_c, \"FaceLandmarkDetection\");","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/faceLandmarkDetection.js"],"names":["FaceMesh","React","useRef","useEffect","Facemesh","Camera","drawConnectors","Webcam","solve","FaceLandmarkDetection","webcamRef","canvasRef","position","marginLeft","marginRight","left","right","textAlign","zindex","width","height"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAO,KAAKC,QAAZ,MAA0B,sBAA1B;AACA,SAASC,MAAT,QAAuB,sCAAvB;AACA,SAAQC,cAAR,QAA8B,wCAA9B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAGA,eAAe,SAASC,qBAAT,GAAiC;AAAA;;AAC9C,QAAMC,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMS,SAAS,GAAGT,MAAM,CAAC,IAAD,CAAxB,CAF8C,CAI9C;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAK,IAAAA,KAAK,CAACE,SAAD,EAAYC,SAAZ,CAAL;AACD,GA5EQ,EA4EN,EA5EM,CAAT;AA6EA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,GAAG,EAAED,SADP;AAEE,QAAA,KAAK,EAAE;AACLE,UAAAA,QAAQ,EAAE,UADL;AAELC,UAAAA,UAAU,EAAE,MAFP;AAGLC,UAAAA,WAAW,EAAE,MAHR;AAILC,UAAAA,IAAI,EAAE,CAJD;AAKLC,UAAAA,KAAK,EAAE,CALF;AAMLC,UAAAA,SAAS,EAAE,QANN;AAOLC,UAAAA,MAAM,EAAE,CAPH;AAQLC,UAAAA,KAAK,EAAE,GARF;AASLC,UAAAA,MAAM,EAAE;AATH;AAFT;AAAA;AAAA;AAAA;AAAA,cADF,EAcK,GAdL,eAeE;AACE,QAAA,GAAG,EAAET,SADP;AAEE,QAAA,SAAS,EAAC,eAFZ;AAGE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,UADL;AAELC,UAAAA,UAAU,EAAE,MAFP;AAGLC,UAAAA,WAAW,EAAE,MAHR;AAILC,UAAAA,IAAI,EAAE,CAJD;AAKLC,UAAAA,KAAK,EAAE,CALF;AAMLC,UAAAA,SAAS,EAAE,QANN;AAOLC,UAAAA,MAAM,EAAE,CAPH;AAQLC,UAAAA,KAAK,EAAE,GARF;AASLC,UAAAA,MAAM,EAAE;AATH;AAHT;AAAA;AAAA;AAAA;AAAA,cAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;GAvKuBX,qB;;KAAAA,qB","sourcesContent":["import { FaceMesh } from \"@mediapipe/face_mesh\";\nimport React, { useRef, useEffect } from \"react\";\nimport * as Facemesh from \"@mediapipe/face_mesh\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport {drawConnectors}  from '@mediapipe/drawing_utils/drawing_utils';\nimport Webcam from \"react-webcam\";\nimport solve from \"./bodyPoseDetection\";\n\n\nexport default function FaceLandmarkDetection() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // function onResults(results) {\n  //   // const video = webcamRef.current.video;\n  //   const videoWidth = webcamRef.current.video.videoWidth;\n  //   const videoHeight = webcamRef.current.video.videoHeight;\n\n  //   // Set canvas width\n  //   canvasRef.current.width = videoWidth;\n  //   canvasRef.current.height = videoHeight;\n\n  //   const canvasElement = canvasRef.current;\n  //   const canvasCtx = canvasElement.getContext(\"2d\");\n  //   canvasCtx.save();\n  //   canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n  //   canvasCtx.drawImage(\n  //     results.image,\n  //     0,\n  //     0,\n  //     canvasElement.width,\n  //     canvasElement.height\n  //   );\n  //   if (results.multiFaceLandmarks) {\n  //     for (const landmarks of results.multiFaceLandmarks) {\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n  //         color: \"#C0C0C070\",\n  //         lineWidth: 1,\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n  //         color: \"#FF3030\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n  //         color: \"#FF3030\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n  //         color: \"#30FF30\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n  //         color: \"#30FF30\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n  //         color: \"#E0E0E0\",\n  //       });\n  //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n  //         color: \"#E0E0E0\",\n  //       });\n  //     }\n  //   }\n  //   canvasCtx.restore();\n  // }\n  // }\n\n  // setInterval(())\n  useEffect(() => {\n    // const faceMesh = new FaceMesh({\n    //   locateFile: (file) => {\n    //     return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;\n    //   },\n    // });\n\n    // faceMesh.setOptions({\n    //   maxNumFaces: 4,\n    //   refineLandmarks: true,\n    //   minDetectionConfidence: 0.5,\n    //   minTrackingConfidence: 0.5,\n    // });\n\n    // faceMesh.onResults((results) => {\n    //   const videoWidth = webcamRef.current.video.videoWidth;\n    // const videoHeight = webcamRef.current.video.videoHeight;\n\n    // // Set canvas width\n    // canvasRef.current.width = videoWidth;\n    // canvasRef.current.height = videoHeight;\n\n    // const canvasElement = canvasRef.current;\n    // const canvasCtx = canvasElement.getContext(\"2d\");\n    // canvasCtx.save();\n    // canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    // canvasCtx.drawImage(\n    //   results.image,\n    //   0,\n    //   0,\n    //   canvasElement.width,\n    //   canvasElement.height\n    // );\n    // if (results.multiFaceLandmarks) {\n    //   for (const landmarks of results.multiFaceLandmarks) {\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n    //       color: \"#C0C0C070\",\n    //       lineWidth: 1,\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n    //       color: \"#FF3030\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n    //       color: \"#FF3030\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n    //       color: \"#30FF30\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n    //       color: \"#30FF30\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n    //       color: \"#E0E0E0\",\n    //     });\n    //     drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n    //       color: \"#E0E0E0\",\n    //     });\n    //   }\n    // }\n    // canvasCtx.restore();\n    // });\n\n    // if (\n    //   typeof webcamRef.current !== \"undefined\" &&\n    //   webcamRef.current !== null\n    // ) {\n    //   const camera = new Camera(webcamRef.current.video, {\n    //     onFrame: async () => {\n    //       await faceMesh.send({ image: webcamRef.current.video });\n    //     },\n    //     width: 1280,\n    //     height: 720,\n    //   });\n    //   camera.start();\n    // }\n    solve(webcamRef ,canvasRef);\n  }, []);\n  return (\n    <center>\n      <div className=\"App\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />{\" \"}\n        <canvas\n          ref={canvasRef}\n          className=\"output_canvas\"\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        ></canvas>\n      </div>\n    </center>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}