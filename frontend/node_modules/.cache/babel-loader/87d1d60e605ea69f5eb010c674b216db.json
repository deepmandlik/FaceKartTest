{"ast":null,"code":"var _jsxFileName = \"/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/bodyPoseDetection.js\",\n    _s = $RefreshSig$();\n\nimport { Holistic, POSE_CONNECTIONS, FACEMESH_TESSELATION, HAND_CONNECTIONS } from \"@mediapipe/holistic/holistic\";\nimport React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { drawConnectors, drawLandmarks } from \"@mediapipe/drawing_utils/drawing_utils\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BodyPoseDetection() {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function onResults(results) {\n    // const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save(); // canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    // canvasCtx.drawImage(\n    //   results.segmentationMask,\n    //   0,\n    //   0,\n    //   canvasElement.width,\n    //   canvasElement.height\n    // );\n    // Only overwrite existing pixels.\n    // canvasCtx.globalCompositeOperation = \"source-in\";\n    // canvasCtx.fillStyle = \"#00FF00\";\n    // canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n    // // Only overwrite missing pixels.\n    // canvasCtx.globalCompositeOperation = \"destination-atop\";\n    // canvasCtx.drawImage(\n    //   results.image,\n    //   0,\n    //   0,\n    //   canvasElement.width,\n    //   canvasElement.height\n    // );\n\n    canvasCtx.globalCompositeOperation = \"source-over\";\n    drawConnectors(canvasCtx, results.poseLandmarks, POSE_CONNECTIONS, {\n      color: \"#00FF00\",\n      lineWidth: 4\n    });\n    drawLandmarks(canvasCtx, results.poseLandmarks, {\n      color: \"#FF0000\",\n      lineWidth: 2\n    }); // drawConnectors(canvasCtx, results.faceLandmarks, FACEMESH_TESSELATION, {\n    //   color: \"#C0C0C070\",\n    //   lineWidth: 1,\n    // });\n\n    drawConnectors(canvasCtx, results.leftHandLandmarks, HAND_CONNECTIONS, {\n      color: \"#CC0000\",\n      lineWidth: 5\n    });\n    drawLandmarks(canvasCtx, results.leftHandLandmarks, {\n      color: \"#00FF00\",\n      lineWidth: 2\n    });\n    drawConnectors(canvasCtx, results.rightHandLandmarks, HAND_CONNECTIONS, {\n      color: \"#00CC00\",\n      lineWidth: 5\n    });\n    drawLandmarks(canvasCtx, results.rightHandLandmarks, {\n      color: \"#FF0000\",\n      lineWidth: 2\n    });\n    canvasCtx.restore();\n    console.log(\"done\");\n  } // }\n  // setInterval(())\n\n\n  useEffect(() => {\n    const holistic = new Holistic({\n      locateFile: file => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic/${file}`;\n      }\n    });\n    holistic.setOptions({\n      modelComplexity: 3,\n      smoothLandmarks: true,\n      enableSegmentation: true,\n      smoothSegmentation: true,\n      refineFaceLandmarks: true,\n      minDetectionConfidence: 0.5,\n      minTrackingConfidence: 0.5\n    });\n    holistic.onResults(onResults);\n    const camera = new Camera(webcamRef.current.video, {\n      onFrame: async () => {\n        await holistic.send({\n          image: webcamRef.current.video\n        });\n      },\n      width: 1280,\n      height: 720\n    });\n    camera.start();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"center\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        className: \"output_canvas\",\n        style: {\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 640,\n          height: 480\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BodyPoseDetection, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = BodyPoseDetection;\n\nvar _c;\n\n$RefreshReg$(_c, \"BodyPoseDetection\");","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/bodyPoseDetection.js"],"names":["Holistic","POSE_CONNECTIONS","FACEMESH_TESSELATION","HAND_CONNECTIONS","React","useRef","useEffect","Camera","drawConnectors","drawLandmarks","Webcam","BodyPoseDetection","webcamRef","canvasRef","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","globalCompositeOperation","poseLandmarks","color","lineWidth","leftHandLandmarks","rightHandLandmarks","restore","console","log","holistic","locateFile","file","setOptions","modelComplexity","smoothLandmarks","enableSegmentation","smoothSegmentation","refineFaceLandmarks","minDetectionConfidence","minTrackingConfidence","camera","onFrame","send","image","start","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import {\n  Holistic,\n  POSE_CONNECTIONS,\n  FACEMESH_TESSELATION,\n  HAND_CONNECTIONS,\n} from \"@mediapipe/holistic/holistic\";\nimport React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport {\n  drawConnectors,\n  drawLandmarks,\n} from \"@mediapipe/drawing_utils/drawing_utils\";\nimport Webcam from \"react-webcam\";\n\nexport default function BodyPoseDetection() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  function onResults(results) {\n    // const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n\n    canvasCtx.save();\n    // canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    // canvasCtx.drawImage(\n    //   results.segmentationMask,\n    //   0,\n    //   0,\n    //   canvasElement.width,\n    //   canvasElement.height\n    // );\n\n    // Only overwrite existing pixels.\n    // canvasCtx.globalCompositeOperation = \"source-in\";\n    // canvasCtx.fillStyle = \"#00FF00\";\n    // canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n\n    // // Only overwrite missing pixels.\n    // canvasCtx.globalCompositeOperation = \"destination-atop\";\n    // canvasCtx.drawImage(\n    //   results.image,\n    //   0,\n    //   0,\n    //   canvasElement.width,\n    //   canvasElement.height\n    // );\n\n    canvasCtx.globalCompositeOperation = \"source-over\";\n    drawConnectors(canvasCtx, results.poseLandmarks, POSE_CONNECTIONS, {\n      color: \"#00FF00\",\n      lineWidth: 4,\n    });\n    drawLandmarks(canvasCtx, results.poseLandmarks, {\n      color: \"#FF0000\",\n      lineWidth: 2,\n    });\n    // drawConnectors(canvasCtx, results.faceLandmarks, FACEMESH_TESSELATION, {\n    //   color: \"#C0C0C070\",\n    //   lineWidth: 1,\n    // });\n    drawConnectors(canvasCtx, results.leftHandLandmarks, HAND_CONNECTIONS, {\n      color: \"#CC0000\",\n      lineWidth: 5,\n    });\n    drawLandmarks(canvasCtx, results.leftHandLandmarks, {\n      color: \"#00FF00\",\n      lineWidth: 2,\n    });\n    drawConnectors(canvasCtx, results.rightHandLandmarks, HAND_CONNECTIONS, {\n      color: \"#00CC00\",\n      lineWidth: 5,\n    });\n    drawLandmarks(canvasCtx, results.rightHandLandmarks, {\n      color: \"#FF0000\",\n      lineWidth: 2,\n    });\n    canvasCtx.restore();\n    console.log(\"done\");\n  }\n  // }\n\n  // setInterval(())\n  useEffect(() => {\n    const holistic = new Holistic({\n      locateFile: (file) => {\n        return `https://cdn.jsdelivr.net/npm/@mediapipe/holistic/${file}`;\n      },\n    });\n    holistic.setOptions({\n      modelComplexity: 3,\n      smoothLandmarks: true,\n      enableSegmentation: true,\n      smoothSegmentation: true,\n      refineFaceLandmarks: true,\n      minDetectionConfidence: 0.5,\n      minTrackingConfidence: 0.5,\n    });\n    holistic.onResults(onResults);\n\n    const camera = new Camera(webcamRef.current.video, {\n      onFrame: async () => {\n        await holistic.send({ image: webcamRef.current.video });\n      },\n      width: 1280,\n      height: 720,\n    });\n    camera.start();\n  }, []);\n\n  return (\n    <center>\n      <div className=\"App\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />{\" \"}\n        <canvas\n          ref={canvasRef}\n          className=\"output_canvas\"\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        ></canvas>\n      </div>\n    </center>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}