{"ast":null,"code":"// import { FaceMesh } from \"@mediapipe/face_mesh\";\n// import React, { useRef, useEffect } from \"react\";\n// import * as Facemesh from \"@mediapipe/face_mesh\";\n// import { Camera } from \"@mediapipe/camera_utils/camera_utils\";\n// import {drawConnectors}  from '@mediapipe/drawing_utils/drawing_utils';\n// import Webcam from \"react-webcam\";\n// // export default function solve(webcamRef ,  canvasRef) {\n// //   const faceMesh = new FaceMesh({\n// //     locateFile: (file) => {\n// //       return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;\n// //     },\n// //   });\n// //   faceMesh.setOptions({\n// //     maxNumFaces: 4,\n// //     refineLandmarks: true,\n// //     minDetectionConfidence: 0.5,\n// //     minTrackingConfidence: 0.5,\n// //   });\n// //   faceMesh.onResults((results) => {\n// //     const videoWidth = webcamRef.current.video.videoWidth;\n// //   const videoHeight = webcamRef.current.video.videoHeight;\n// //   // Set canvas width\n// //   canvasRef.current.width = videoWidth;\n// //   canvasRef.current.height = videoHeight;\n// //   const canvasElement = canvasRef.current;\n// //   const canvasCtx = canvasElement.getContext(\"2d\");\n// //   canvasCtx.save();\n// //   canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n// //   canvasCtx.drawImage(\n// //     results.image,\n// //     0,\n// //     0,\n// //     canvasElement.width,\n// //     canvasElement.height\n// //   );\n// //   if (results.multiFaceLandmarks) {\n// //     for (const landmarks of results.multiFaceLandmarks) {\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n// //         color: \"#C0C0C070\",\n// //         lineWidth: 1,\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n// //         color: \"#FF3030\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n// //         color: \"#FF3030\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n// //         color: \"#30FF30\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n// //         color: \"#30FF30\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n// //         color: \"#E0E0E0\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n// //         color: \"#E0E0E0\",\n// //       });\n// //     }\n// //   }\n// //   canvasCtx.restore();\n// //   });\n// //   if (\n// //     typeof webcamRef.current !== \"undefined\" &&\n// //     webcamRef.current !== null\n// //   ) {\n// //     const camera = new Camera(webcamRef.current.video, {\n// //       onFrame: async () => {\n// //         await faceMesh.send({ image: webcamRef.current.video });\n// //       },\n// //       width: 1280,\n// //       height: 720,\n// //     });\n// //     camera.start();\n// //   }\n// // }\n// export default function FaceLandmarkDetection() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n//   function onResults(results) {\n//     // const video = webcamRef.current.video;\n//     const videoWidth = webcamRef.current.video.videoWidth;\n//     const videoHeight = webcamRef.current.video.videoHeight;\n//     // Set canvas width\n//     canvasRef.current.width = videoWidth;\n//     canvasRef.current.height = videoHeight;\n//     const canvasElement = canvasRef.current;\n//     const canvasCtx = canvasElement.getContext(\"2d\");\n//     canvasCtx.save();\n//     canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n//     canvasCtx.drawImage(\n//       results.image,\n//       0,\n//       0,\n//       canvasElement.width,\n//       canvasElement.height\n//     );\n//     if (results.multiFaceLandmarks) {\n//       for (const landmarks of results.multiFaceLandmarks) {\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n//           color: \"#C0C0C070\",\n//           lineWidth: 1,\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n//           color: \"#FF3030\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n//           color: \"#FF3030\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n//           color: \"#30FF30\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n//           color: \"#30FF30\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n//           color: \"#E0E0E0\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n//           color: \"#E0E0E0\",\n//         });\n//       }\n//     }\n//     canvasCtx.restore();\n//   }\n//   }\n//   // setInterval(())\n//   useEffect(() => {\n//     const faceMesh = new FaceMesh({\n//       locateFile: (file) => {\n//         return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;\n//       },\n//     });\n//     faceMesh.setOptions({\n//       maxNumFaces: 4,\n//       refineLandmarks: true,\n//       minDetectionConfidence: 0.5,\n//       minTrackingConfidence: 0.5,\n//     });\n//     faceMesh.onResults((results) => {\n//       const videoWidth = webcamRef.current.video.videoWidth;\n//     const videoHeight = webcamRef.current.video.videoHeight;\n//     // Set canvas width\n//     canvasRef.current.width = videoWidth;\n//     canvasRef.current.height = videoHeight;\n//     const canvasElement = canvasRef.current;\n//     const canvasCtx = canvasElement.getContext(\"2d\");\n//     canvasCtx.save();\n//     canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n//     canvasCtx.drawImage(\n//       results.image,\n//       0,\n//       0,\n//       canvasElement.width,\n//       canvasElement.height\n//     );\n//     if (results.multiFaceLandmarks) {\n//       for (const landmarks of results.multiFaceLandmarks) {\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n//           color: \"#C0C0C070\",\n//           lineWidth: 1,\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n//           color: \"#FF3030\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n//           color: \"#FF3030\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n//           color: \"#30FF30\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n//           color: \"#30FF30\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n//           color: \"#E0E0E0\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n//           color: \"#E0E0E0\",\n//         });\n//       }\n//     }\n//     canvasCtx.restore();\n//     });\n//     if (\n//       typeof webcamRef.current !== \"undefined\" &&\n//       webcamRef.current !== null\n//     ) {\n//       const camera = new Camera(webcamRef.current.video, {\n//         onFrame: async () => {\n//           await faceMesh.send({ image: webcamRef.current.video });\n//         },\n//         width: 1280,\n//         height: 720,\n//       });\n//       camera.start();\n//     }\n//   }, []);\n//   return (\n//     <center>\n//       <div className=\"App\">\n//         <Webcam\n//           ref={webcamRef}\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         />{\" \"}\n//         <canvas\n//           ref={canvasRef}\n//           className=\"output_canvas\"\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         ></canvas>\n//       </div>\n//     </center>\n//   );\n// }","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/faceLandmarkDetection.js"],"names":[],"mappingssourcesContent":["// import { FaceMesh } from \"@mediapipe/face_mesh\";\n// import React, { useRef, useEffect } from \"react\";\n// import * as Facemesh from \"@mediapipe/face_mesh\";\n// import { Camera } from \"@mediapipe/camera_utils/camera_utils\";\n// import {drawConnectors}  from '@mediapipe/drawing_utils/drawing_utils';\n// import Webcam from \"react-webcam\";\n\n\n// // export default function solve(webcamRef ,  canvasRef) {\n// //   const faceMesh = new FaceMesh({\n// //     locateFile: (file) => {\n// //       return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;\n// //     },\n// //   });\n\n// //   faceMesh.setOptions({\n// //     maxNumFaces: 4,\n// //     refineLandmarks: true,\n// //     minDetectionConfidence: 0.5,\n// //     minTrackingConfidence: 0.5,\n// //   });\n\n// //   faceMesh.onResults((results) => {\n// //     const videoWidth = webcamRef.current.video.videoWidth;\n// //   const videoHeight = webcamRef.current.video.videoHeight;\n\n// //   // Set canvas width\n// //   canvasRef.current.width = videoWidth;\n// //   canvasRef.current.height = videoHeight;\n\n// //   const canvasElement = canvasRef.current;\n// //   const canvasCtx = canvasElement.getContext(\"2d\");\n// //   canvasCtx.save();\n// //   canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n// //   canvasCtx.drawImage(\n// //     results.image,\n// //     0,\n// //     0,\n// //     canvasElement.width,\n// //     canvasElement.height\n// //   );\n// //   if (results.multiFaceLandmarks) {\n// //     for (const landmarks of results.multiFaceLandmarks) {\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n// //         color: \"#C0C0C070\",\n// //         lineWidth: 1,\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n// //         color: \"#FF3030\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n// //         color: \"#FF3030\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n// //         color: \"#30FF30\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n// //         color: \"#30FF30\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n// //         color: \"#E0E0E0\",\n// //       });\n// //       drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n// //         color: \"#E0E0E0\",\n// //       });\n// //     }\n// //   }\n// //   canvasCtx.restore();\n// //   });\n\n// //   if (\n// //     typeof webcamRef.current !== \"undefined\" &&\n// //     webcamRef.current !== null\n// //   ) {\n// //     const camera = new Camera(webcamRef.current.video, {\n// //       onFrame: async () => {\n// //         await faceMesh.send({ image: webcamRef.current.video });\n// //       },\n// //       width: 1280,\n// //       height: 720,\n// //     });\n// //     camera.start();\n// //   }\n// // }\n\n\n// export default function FaceLandmarkDetection() {\n//   const webcamRef = useRef(null);\n//   const canvasRef = useRef(null);\n\n//   function onResults(results) {\n//     // const video = webcamRef.current.video;\n//     const videoWidth = webcamRef.current.video.videoWidth;\n//     const videoHeight = webcamRef.current.video.videoHeight;\n\n//     // Set canvas width\n//     canvasRef.current.width = videoWidth;\n//     canvasRef.current.height = videoHeight;\n\n//     const canvasElement = canvasRef.current;\n//     const canvasCtx = canvasElement.getContext(\"2d\");\n//     canvasCtx.save();\n//     canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n//     canvasCtx.drawImage(\n//       results.image,\n//       0,\n//       0,\n//       canvasElement.width,\n//       canvasElement.height\n//     );\n//     if (results.multiFaceLandmarks) {\n//       for (const landmarks of results.multiFaceLandmarks) {\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n//           color: \"#C0C0C070\",\n//           lineWidth: 1,\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n//           color: \"#FF3030\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n//           color: \"#FF3030\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n//           color: \"#30FF30\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n//           color: \"#30FF30\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n//           color: \"#E0E0E0\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n//           color: \"#E0E0E0\",\n//         });\n//       }\n//     }\n//     canvasCtx.restore();\n//   }\n//   }\n\n//   // setInterval(())\n//   useEffect(() => {\n//     const faceMesh = new FaceMesh({\n//       locateFile: (file) => {\n//         return `https://cdn.jsdelivr.net/npm/@mediapipe/face_mesh/${file}`;\n//       },\n//     });\n\n//     faceMesh.setOptions({\n//       maxNumFaces: 4,\n//       refineLandmarks: true,\n//       minDetectionConfidence: 0.5,\n//       minTrackingConfidence: 0.5,\n//     });\n\n//     faceMesh.onResults((results) => {\n//       const videoWidth = webcamRef.current.video.videoWidth;\n//     const videoHeight = webcamRef.current.video.videoHeight;\n\n//     // Set canvas width\n//     canvasRef.current.width = videoWidth;\n//     canvasRef.current.height = videoHeight;\n\n//     const canvasElement = canvasRef.current;\n//     const canvasCtx = canvasElement.getContext(\"2d\");\n//     canvasCtx.save();\n//     canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n//     canvasCtx.drawImage(\n//       results.image,\n//       0,\n//       0,\n//       canvasElement.width,\n//       canvasElement.height\n//     );\n//     if (results.multiFaceLandmarks) {\n//       for (const landmarks of results.multiFaceLandmarks) {\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_TESSELATION, {\n//           color: \"#C0C0C070\",\n//           lineWidth: 1,\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYE, {\n//           color: \"#FF3030\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_RIGHT_EYEBROW, {\n//           color: \"#FF3030\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYE, {\n//           color: \"#30FF30\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LEFT_EYEBROW, {\n//           color: \"#30FF30\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_FACE_OVAL, {\n//           color: \"#E0E0E0\",\n//         });\n//         drawConnectors(canvasCtx, landmarks, Facemesh.FACEMESH_LIPS, {\n//           color: \"#E0E0E0\",\n//         });\n//       }\n//     }\n//     canvasCtx.restore();\n//     });\n\n//     if (\n//       typeof webcamRef.current !== \"undefined\" &&\n//       webcamRef.current !== null\n//     ) {\n//       const camera = new Camera(webcamRef.current.video, {\n//         onFrame: async () => {\n//           await faceMesh.send({ image: webcamRef.current.video });\n//         },\n//         width: 1280,\n//         height: 720,\n//       });\n//       camera.start();\n//     }\n//   }, []);\n//   return (\n//     <center>\n//       <div className=\"App\">\n//         <Webcam\n//           ref={webcamRef}\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         />{\" \"}\n//         <canvas\n//           ref={canvasRef}\n//           className=\"output_canvas\"\n//           style={{\n//             position: \"absolute\",\n//             marginLeft: \"auto\",\n//             marginRight: \"auto\",\n//             left: 0,\n//             right: 0,\n//             textAlign: \"center\",\n//             zindex: 9,\n//             width: 640,\n//             height: 480,\n//           }}\n//         ></canvas>\n//       </div>\n//     </center>\n//   );\n  \n// }\n\n\n"]},"metadata":{},"sourceType":"module"}