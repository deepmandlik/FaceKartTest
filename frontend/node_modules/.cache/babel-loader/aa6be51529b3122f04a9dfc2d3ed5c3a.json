{"ast":null,"code":"import { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { Objectron, mpObjectron } from \"@mediapipe/objectron/objectron\";\nimport { drawingUtils } from \"@mediapipe/drawing_utils/drawing_utils\";\nexport default function ccc(webcamRef, canvasRef) {\n  const objectron = new Objectron({\n    locateFile: file => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/objectron/${file}`;\n    }\n  });\n  objectron.setOptions({\n    modelName: \"Chair\",\n    maxNumObjects: 3\n  });\n  objectron.onResults(results => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n\n    if (results.objectDetections) {\n      for (const detectedObject of results.objectDetections) {\n        // Reformat keypoint information as landmarks, for easy drawing.\n        const landmarks = detectedObject.keypoints.map(x => x.point2d); // Draw bounding box.\n\n        drawingUtils.drawConnectors(canvasCtx, landmarks, mpObjectron.BOX_CONNECTIONS, {\n          color: \"#FF0000\"\n        }); // Draw centroid.\n\n        drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {\n          color: \"#FFFFFF\"\n        });\n      }\n    }\n\n    canvasCtx.restore();\n  });\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await objectron.send({\n        image: webcamRef.current.video\n      });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n}","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/frontend/src/components/features/objectronDetection.js"],"names":["Camera","Objectron","mpObjectron","drawingUtils","ccc","webcamRef","canvasRef","objectron","locateFile","file","setOptions","modelName","maxNumObjects","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","drawImage","image","objectDetections","detectedObject","landmarks","keypoints","map","x","point2d","drawConnectors","BOX_CONNECTIONS","color","drawLandmarks","restore","camera","onFrame","send","start"],"mappings":"AAAA,SAASA,MAAT,QAAuB,sCAAvB;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,gCAAvC;AACA,SAASC,YAAT,QAA6B,wCAA7B;AAEA,eAAe,SAASC,GAAT,CAAaC,SAAb,EAAwBC,SAAxB,EAAmC;AAChD,QAAMC,SAAS,GAAG,IAAIN,SAAJ,CAAc;AAC9BO,IAAAA,UAAU,EAAGC,IAAD,IAAU;AACpB,aAAQ,qDAAoDA,IAAK,EAAjE;AACD;AAH6B,GAAd,CAAlB;AAKAF,EAAAA,SAAS,CAACG,UAAV,CAAqB;AACnBC,IAAAA,SAAS,EAAE,OADQ;AAEnBC,IAAAA,aAAa,EAAE;AAFI,GAArB;AAIAL,EAAAA,SAAS,CAACM,SAAV,CAAqBC,OAAD,IAAa;AAC/B,UAAMC,UAAU,GAAGV,SAAS,CAACW,OAAV,CAAkBC,KAAlB,CAAwBF,UAA3C;AACA,UAAMG,WAAW,GAAGb,SAAS,CAACW,OAAV,CAAkBC,KAAlB,CAAwBC,WAA5C,CAF+B,CAI/B;;AACAZ,IAAAA,SAAS,CAACU,OAAV,CAAkBG,KAAlB,GAA0BJ,UAA1B;AACAT,IAAAA,SAAS,CAACU,OAAV,CAAkBI,MAAlB,GAA2BF,WAA3B;AAEA,UAAMG,aAAa,GAAGf,SAAS,CAACU,OAAhC;AACA,UAAMM,SAAS,GAAGD,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAAlB;AACAD,IAAAA,SAAS,CAACE,IAAV;AACAF,IAAAA,SAAS,CAACG,SAAV,CACEX,OAAO,CAACY,KADV,EAEE,CAFF,EAGE,CAHF,EAIEL,aAAa,CAACF,KAJhB,EAKEE,aAAa,CAACD,MALhB;;AAOA,QAAIN,OAAO,CAACa,gBAAZ,EAA8B;AAC5B,WAAK,MAAMC,cAAX,IAA6Bd,OAAO,CAACa,gBAArC,EAAuD;AACrD;AACA,cAAME,SAAS,GAAGD,cAAc,CAACE,SAAf,CAAyBC,GAAzB,CAA8BC,CAAD,IAAOA,CAAC,CAACC,OAAtC,CAAlB,CAFqD,CAGrD;;AACA9B,QAAAA,YAAY,CAAC+B,cAAb,CACEZ,SADF,EAEEO,SAFF,EAGE3B,WAAW,CAACiC,eAHd,EAIE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAJF,EAJqD,CAUrD;;AACAjC,QAAAA,YAAY,CAACkC,aAAb,CAA2Bf,SAA3B,EAAsC,CAACO,SAAS,CAAC,CAAD,CAAV,CAAtC,EAAsD;AACpDO,UAAAA,KAAK,EAAE;AAD6C,SAAtD;AAGD;AACF;;AACDd,IAAAA,SAAS,CAACgB,OAAV;AACD,GApCD;AAsCA,QAAMC,MAAM,GAAG,IAAIvC,MAAJ,CAAWK,SAAS,CAACW,OAAV,CAAkBC,KAA7B,EAAoC;AACjDuB,IAAAA,OAAO,EAAE,YAAY;AACnB,YAAMjC,SAAS,CAACkC,IAAV,CAAe;AAAEf,QAAAA,KAAK,EAAErB,SAAS,CAACW,OAAV,CAAkBC;AAA3B,OAAf,CAAN;AACD,KAHgD;AAIjDE,IAAAA,KAAK,EAAE,IAJ0C;AAKjDC,IAAAA,MAAM,EAAE;AALyC,GAApC,CAAf;AAOAmB,EAAAA,MAAM,CAACG,KAAP;AACD","sourcesContent":["import { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { Objectron, mpObjectron } from \"@mediapipe/objectron/objectron\";\nimport { drawingUtils } from \"@mediapipe/drawing_utils/drawing_utils\";\n\nexport default function ccc(webcamRef, canvasRef) {\n  const objectron = new Objectron({\n    locateFile: (file) => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/objectron/${file}`;\n    },\n  });\n  objectron.setOptions({\n    modelName: \"Chair\",\n    maxNumObjects: 3,\n  });\n  objectron.onResults((results) => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.drawImage(\n      results.image,\n      0,\n      0,\n      canvasElement.width,\n      canvasElement.height\n    );\n    if (results.objectDetections) {\n      for (const detectedObject of results.objectDetections) {\n        // Reformat keypoint information as landmarks, for easy drawing.\n        const landmarks = detectedObject.keypoints.map((x) => x.point2d);\n        // Draw bounding box.\n        drawingUtils.drawConnectors(\n          canvasCtx,\n          landmarks,\n          mpObjectron.BOX_CONNECTIONS,\n          { color: \"#FF0000\" }\n        );\n        // Draw centroid.\n        drawingUtils.drawLandmarks(canvasCtx, [landmarks[0]], {\n          color: \"#FFFFFF\",\n        });\n      }\n    }\n    canvasCtx.restore();\n  });\n\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await objectron.send({ image: webcamRef.current.video });\n    },\n    width: 1280,\n    height: 720,\n  });\n  camera.start();\n}\n"]},"metadata":{},"sourceType":"module"}