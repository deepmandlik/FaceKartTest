{"ast":null,"code":"import { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { SelfieSegmentation } from \"@mediapipe/selfie_segmentation/selfie_segmentation\";\nexport default function GreenScreen(webcamRef, canvasRef) {\n  const selfieSegmentation = new SelfieSegmentation({\n    locateFile: file => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n    }\n  });\n  selfieSegmentation.setOptions({\n    modelSelection: 1\n  });\n  selfieSegmentation.onResults(results => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save(); // canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n\n    canvasCtx.drawImage(results.segmentationMask, 0, 0, canvasElement.width, canvasElement.height); // Only overwrite existing pixels.\n\n    canvasCtx.globalCompositeOperation = \"source-in\";\n    canvasCtx.fillStyle = \"green\";\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height); // Only overwrite missing pixels.\n\n    canvasCtx.globalCompositeOperation = \"destination-atop\";\n    canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.restore();\n  });\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await selfieSegmentation.send({\n        image: webcamRef.current.video\n      });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n}\n_c = GreenScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"GreenScreen\");","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/frontend/src/components/features/selfieSegmentation.js"],"names":["Camera","SelfieSegmentation","GreenScreen","webcamRef","canvasRef","selfieSegmentation","locateFile","file","setOptions","modelSelection","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","drawImage","segmentationMask","globalCompositeOperation","fillStyle","image","fillRect","restore","camera","onFrame","send","start"],"mappings":"AAAA,SAASA,MAAT,QAAuB,sCAAvB;AACA,SAASC,kBAAT,QAAmC,oDAAnC;AAEA,eAAe,SAASC,WAAT,CAAqBC,SAArB,EAAiCC,SAAjC,EAA2C;AACxD,QAAMC,kBAAkB,GAAG,IAAIJ,kBAAJ,CAAuB;AAChDK,IAAAA,UAAU,EAAGC,IAAD,IAAU;AACpB,aAAQ,+DAA8DA,IAAK,EAA3E;AACD;AAH+C,GAAvB,CAA3B;AAKAF,EAAAA,kBAAkB,CAACG,UAAnB,CAA8B;AAC5BC,IAAAA,cAAc,EAAE;AADY,GAA9B;AAGAJ,EAAAA,kBAAkB,CAACK,SAAnB,CAA8BC,OAAD,IAAa;AACxC,UAAMC,UAAU,GAAGT,SAAS,CAACU,OAAV,CAAkBC,KAAlB,CAAwBF,UAA3C;AACA,UAAMG,WAAW,GAAGZ,SAAS,CAACU,OAAV,CAAkBC,KAAlB,CAAwBC,WAA5C,CAFwC,CAIxC;;AACAX,IAAAA,SAAS,CAACS,OAAV,CAAkBG,KAAlB,GAA0BJ,UAA1B;AACAR,IAAAA,SAAS,CAACS,OAAV,CAAkBI,MAAlB,GAA2BF,WAA3B;AAEA,UAAMG,aAAa,GAAGd,SAAS,CAACS,OAAhC;AACA,UAAMM,SAAS,GAAGD,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAAlB;AACAD,IAAAA,SAAS,CAACE,IAAV,GAVwC,CAWxC;;AACAF,IAAAA,SAAS,CAACG,SAAV,CACEX,OAAO,CAACY,gBADV,EAEE,CAFF,EAGE,CAHF,EAIEL,aAAa,CAACF,KAJhB,EAKEE,aAAa,CAACD,MALhB,EAZwC,CAoBxC;;AACAE,IAAAA,SAAS,CAACK,wBAAV,GAAqC,WAArC;AACAL,IAAAA,SAAS,CAACM,SAAV,GAAsB,OAAtB;AACAN,IAAAA,SAAS,CAACG,SAAV,CACIX,OAAO,CAACe,KADZ,EAEI,CAFJ,EAGI,CAHJ,EAIIR,aAAa,CAACF,KAJlB,EAKIE,aAAa,CAACD,MALlB,EAvBwC,CAgCxC;;AACAE,IAAAA,SAAS,CAACK,wBAAV,GAAqC,kBAArC;AACAL,IAAAA,SAAS,CAACQ,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBT,aAAa,CAACF,KAAvC,EAA8CE,aAAa,CAACD,MAA5D;AACAE,IAAAA,SAAS,CAACS,OAAV;AACD,GApCD;AAsCA,QAAMC,MAAM,GAAG,IAAI7B,MAAJ,CAAWG,SAAS,CAACU,OAAV,CAAkBC,KAA7B,EAAoC;AACjDgB,IAAAA,OAAO,EAAE,YAAY;AACnB,YAAMzB,kBAAkB,CAAC0B,IAAnB,CAAwB;AAAEL,QAAAA,KAAK,EAAEvB,SAAS,CAACU,OAAV,CAAkBC;AAA3B,OAAxB,CAAN;AACD,KAHgD;AAIjDE,IAAAA,KAAK,EAAE,IAJ0C;AAKjDC,IAAAA,MAAM,EAAE;AALyC,GAApC,CAAf;AAOAY,EAAAA,MAAM,CAACG,KAAP;AACD;KAvDuB9B,W","sourcesContent":["import { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { SelfieSegmentation } from \"@mediapipe/selfie_segmentation/selfie_segmentation\";\n\nexport default function GreenScreen(webcamRef , canvasRef){\n  const selfieSegmentation = new SelfieSegmentation({\n    locateFile: (file) => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n    },\n  });\n  selfieSegmentation.setOptions({\n    modelSelection: 1,\n  });\n  selfieSegmentation.onResults((results) => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    // canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(\n      results.segmentationMask,\n      0,\n      0,\n      canvasElement.width,\n      canvasElement.height\n    );\n\n    // Only overwrite existing pixels.\n    canvasCtx.globalCompositeOperation = \"source-in\";\n    canvasCtx.fillStyle = \"green\";\n    canvasCtx.drawImage(\n        results.image,\n        0,\n        0,\n        canvasElement.width,\n        canvasElement.height\n      );\n\n\n    // Only overwrite missing pixels.\n    canvasCtx.globalCompositeOperation = \"destination-atop\";\n    canvasCtx.fillRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.restore();\n  });\n\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await selfieSegmentation.send({ image: webcamRef.current.video });\n    },\n    width: 1280,\n    height: 720,\n  });\n  camera.start();\n}\n\n"]},"metadata":{},"sourceType":"module"}