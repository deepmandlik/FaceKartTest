{"ast":null,"code":"import React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport { HAND_CONNECTIONS, Hands } from \"@mediapipe/hands/hands\";\nimport { drawConnectors, drawLandmarks } from '@mediapipe/drawing_utils/drawing_utils';\nimport Webcam from \"react-webcam\";\nexport default function xxx(webcamRef, canvasRef) {\n  const hands = new Hands({\n    locateFile: file => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;\n    }\n  });\n  hands.setOptions({\n    maxNumHands: 2,\n    modelComplexity: 1,\n    minDetectionConfidence: 0.5,\n    minTrackingConfidence: 0.5\n  });\n  hands.onResults(results => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set canvas width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(results.image, 0, 0, canvasElement.width, canvasElement.height);\n\n    if (results.multiHandLandmarks) {\n      for (const landmarks of results.multiHandLandmarks) {\n        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS, {\n          color: '#00FF00',\n          lineWidth: 5\n        });\n        drawLandmarks(canvasCtx, landmarks, {\n          color: '#FF0000',\n          lineWidth: 2\n        });\n      }\n    }\n\n    canvasCtx.restore();\n  });\n  const camera = new Camera(webcamRef.current.video, {\n    onFrame: async () => {\n      await hands.send({\n        image: webcamRef.current.video\n      });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n}","map":{"version":3,"sources":["/home/deep/Imbesideyou/Imbesideyou_assignment/src/components/features/handShapeDetection.js"],"names":["React","useRef","useEffect","Camera","HAND_CONNECTIONS","Hands","drawConnectors","drawLandmarks","Webcam","xxx","webcamRef","canvasRef","hands","locateFile","file","setOptions","maxNumHands","modelComplexity","minDetectionConfidence","minTrackingConfidence","onResults","results","videoWidth","current","video","videoHeight","width","height","canvasElement","canvasCtx","getContext","save","clearRect","drawImage","image","multiHandLandmarks","landmarks","color","lineWidth","restore","camera","onFrame","send","start"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,MAAT,QAAuB,sCAAvB;AACA,SAAQC,gBAAR,EAA0BC,KAA1B,QAAuC,wBAAvC;AACA,SAAQC,cAAR,EAAyBC,aAAzB,QAA8C,wCAA9C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAGA,eAAe,SAASC,GAAT,CAAaC,SAAb,EAAyBC,SAAzB,EAAoC;AACjD,QAAMC,KAAK,GAAG,IAAIP,KAAJ,CAAU;AAACQ,IAAAA,UAAU,EAAGC,IAAD,IAAU;AAC7C,aAAQ,iDAAgDA,IAAK,EAA7D;AACD;AAFuB,GAAV,CAAd;AAGAF,EAAAA,KAAK,CAACG,UAAN,CAAiB;AACfC,IAAAA,WAAW,EAAE,CADE;AAEfC,IAAAA,eAAe,EAAE,CAFF;AAGfC,IAAAA,sBAAsB,EAAE,GAHT;AAIfC,IAAAA,qBAAqB,EAAE;AAJR,GAAjB;AAMAP,EAAAA,KAAK,CAACQ,SAAN,CAAiBC,OAAD,IAAa;AAC3B,UAAMC,UAAU,GAAGZ,SAAS,CAACa,OAAV,CAAkBC,KAAlB,CAAwBF,UAA3C;AACA,UAAMG,WAAW,GAAGf,SAAS,CAACa,OAAV,CAAkBC,KAAlB,CAAwBC,WAA5C,CAF2B,CAI3B;;AACAd,IAAAA,SAAS,CAACY,OAAV,CAAkBG,KAAlB,GAA0BJ,UAA1B;AACAX,IAAAA,SAAS,CAACY,OAAV,CAAkBI,MAAlB,GAA2BF,WAA3B;AAEA,UAAMG,aAAa,GAAGjB,SAAS,CAACY,OAAhC;AACA,UAAMM,SAAS,GAAGD,aAAa,CAACE,UAAd,CAAyB,IAAzB,CAAlB;AACAD,IAAAA,SAAS,CAACE,IAAV;AACAF,IAAAA,SAAS,CAACG,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0BJ,aAAa,CAACF,KAAxC,EAA+CE,aAAa,CAACD,MAA7D;AACAE,IAAAA,SAAS,CAACI,SAAV,CACIZ,OAAO,CAACa,KADZ,EACmB,CADnB,EACsB,CADtB,EACyBN,aAAa,CAACF,KADvC,EAC8CE,aAAa,CAACD,MAD5D;;AAEA,QAAIN,OAAO,CAACc,kBAAZ,EAAgC;AAC9B,WAAK,MAAMC,SAAX,IAAwBf,OAAO,CAACc,kBAAhC,EAAoD;AAClD7B,QAAAA,cAAc,CAACuB,SAAD,EAAYO,SAAZ,EAAuBhC,gBAAvB,EACC;AAACiC,UAAAA,KAAK,EAAE,SAAR;AAAmBC,UAAAA,SAAS,EAAE;AAA9B,SADD,CAAd;AAEA/B,QAAAA,aAAa,CAACsB,SAAD,EAAYO,SAAZ,EAAuB;AAACC,UAAAA,KAAK,EAAE,SAAR;AAAmBC,UAAAA,SAAS,EAAE;AAA9B,SAAvB,CAAb;AACD;AACF;;AACDT,IAAAA,SAAS,CAACU,OAAV;AACD,GAtBD;AAwBA,QAAMC,MAAM,GAAG,IAAIrC,MAAJ,CAAWO,SAAS,CAACa,OAAV,CAAkBC,KAA7B,EAAqC;AAClDiB,IAAAA,OAAO,EAAE,YAAY;AACnB,YAAM7B,KAAK,CAAC8B,IAAN,CAAW;AAACR,QAAAA,KAAK,EAAExB,SAAS,CAACa,OAAV,CAAkBC;AAA1B,OAAX,CAAN;AACD,KAHiD;AAIlDE,IAAAA,KAAK,EAAE,IAJ2C;AAKlDC,IAAAA,MAAM,EAAE;AAL0C,GAArC,CAAf;AAOAa,EAAAA,MAAM,CAACG,KAAP;AAED","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { Camera } from \"@mediapipe/camera_utils/camera_utils\";\nimport {HAND_CONNECTIONS ,Hands } from \"@mediapipe/hands/hands\";\nimport {drawConnectors , drawLandmarks}  from '@mediapipe/drawing_utils/drawing_utils';\nimport Webcam from \"react-webcam\";\n\n\nexport default function xxx(webcamRef , canvasRef) {\n  const hands = new Hands({locateFile: (file) => {\n    return `https://cdn.jsdelivr.net/npm/@mediapipe/hands/${file}`;\n  }});\n  hands.setOptions({\n    maxNumHands: 2,\n    modelComplexity: 1,\n    minDetectionConfidence: 0.5,\n    minTrackingConfidence: 0.5\n  });\n  hands.onResults((results) => {\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set canvas width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    const canvasElement = canvasRef.current;\n    const canvasCtx = canvasElement.getContext(\"2d\");\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasElement.width, canvasElement.height);\n    canvasCtx.drawImage(\n        results.image, 0, 0, canvasElement.width, canvasElement.height);\n    if (results.multiHandLandmarks) {\n      for (const landmarks of results.multiHandLandmarks) {\n        drawConnectors(canvasCtx, landmarks, HAND_CONNECTIONS,\n                       {color: '#00FF00', lineWidth: 5});\n        drawLandmarks(canvasCtx, landmarks, {color: '#FF0000', lineWidth: 2});\n      }\n    }\n    canvasCtx.restore();\n  });\n  \n  const camera = new Camera(webcamRef.current.video , {\n    onFrame: async () => {\n      await hands.send({image: webcamRef.current.video });\n    },\n    width: 1280,\n    height: 720\n  });\n  camera.start();\n   \n}\n\n"]},"metadata":{},"sourceType":"module"}